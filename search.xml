<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>新文章</title>
    <url>/2021/11/26/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>新文章</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/26/hello-world/</url>
    <content><![CDATA[<span id="more"></span>


<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【pwnable.kr】Toddler‘s Bottle-[fd]</title>
    <url>/2021/12/04/%E3%80%90pwnable.kr%E3%80%91Toddler&#39;s%20Bottle-%5Bfd%5D/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="打开题目审题"><a href="#打开题目审题" class="headerlink" title="打开题目审题"></a>打开题目审题</h1><p><img src="https://gitee.com/AGenerousMiser/pic-go-image/raw/master/img/image-20211106222529367.png" alt="image-20211106222529367"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Mommy! what is a file descriptor <span class="keyword">in</span> Linux?</span><br><span class="line"></span><br><span class="line">* try to play the wargame your self but <span class="keyword">if</span> you are ABSOLUTE beginner, follow this tutorial link:</span><br><span class="line">https://youtu.be/971eZhMHQQw</span><br><span class="line"></span><br><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux中的文件描述符是什么。如果你是完全的初学者，可以去youtube链接看视频。</p>
</blockquote>
<p>解释下 SSH</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure>

<p>SSH 是Linux系统的登录工具，现广泛用于服务器登录和各种加密通信。其实在这里就是一个终端连接工具。</p>
<p>所以，打开CMD</p>
<p><img src="https://gitee.com/AGenerousMiser/pic-go-image/raw/master/img/image-20211106223448388.png" alt="image-20211106223448388"></p>
<p>输入命令回车，输入密码：guest 即可登录服务器。</p>
<p>登录上就可以开始找flag了。</p>
<h1 id="找到突破口"><a href="#找到突破口" class="headerlink" title="找到突破口"></a>找到突破口</h1><p>照例先 <code>ls -la</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fd@pwnable:~$ ls -la</span><br><span class="line">total 40</span><br><span class="line">drwxr-x---   5 root   fd   4096 Oct 26  2016 .</span><br><span class="line">drwxr-xr-x 115 root   root 4096 Dec 22  2020 ..</span><br><span class="line">d---------   2 root   root 4096 Jun 12  2014 .bash_history</span><br><span class="line">-r-sr-x---   1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r--   1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r-----   1 fd_pwn root   50 Jun 11  2014 flag</span><br><span class="line">-rw-------   1 root   root  128 Oct 26  2016 .gdb_history</span><br><span class="line">dr-xr-xr-x   2 root   root 4096 Dec 19  2016 .irssi</span><br><span class="line">drwxr-xr-x   2 root   root 4096 Oct 23  2016 .pwntools-cache</span><br></pre></td></tr></table></figure>

<p>发现flag文件，尝试查看（肯定看不了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fd@pwnable:~$ cat flag</span><br><span class="line">cat: flag: Permission denied</span><br><span class="line">fd@pwnable:~$</span><br></pre></td></tr></table></figure>

<p>果然不能看。</p>
<p>看下别的，文件flag肯定是最后的答案，所以需要看看其他文件找寻突破口。</p>
<p>还有一个c语言源文件<code>fd.c</code>和可执行文件<code>fd</code>。</p>
<p>那没什么说的，看看fd.c。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd@pwnable:~$ cat fd.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>找到重点  system(“/bin/cat flag”);</p>
</blockquote>
<p>看到源码大概已经明白了，我们没有查看文件的权限，但是fd有，所以只要分析如何让代码执行<code>system(&quot;/bin/cat flag&quot;);</code>即可。</p>
<h1 id="相关c语言知识"><a href="#相关c语言知识" class="headerlink" title="相关c语言知识"></a>相关c语言知识</h1><blockquote>
<p>**int main( int argc   , char   *argv[ ]   ,char   *envp[ ]) **</p>
</blockquote>
<p> <strong>main函数的参数列表</strong>保存了输入参数的信息：</p>
<p>第一个参数argc记录了<strong>输入参数的个数</strong>。且argc是包括程序本身在内的参数个数。如本题目，直接./fd运行，该参数实际上是1，而不是0。</p>
<p>第二个参数是<strong>字符串数组</strong>的，字符串数组的每个单元是char*类型的，指向一个c风格字符串，arg[ ]指向的数组中至少有一个字符指针，即arg[0].他通常指向程序中的可执行文件的文件名。 </p>
<p>第三个参数是用来<strong>取得系统的环境变量</strong>，如：在DOS下，有一个PATH变量。当你在DOS提示符下输入一个命令的时候，DOS会首先在当前目录下找这个命令的执行文件。如果找不到，则到PATH定义的路径下去找，找到则执行，找不到返回Bad   command   or   file   name 。在DOS命令提示符下键入set可查看系统的环境变量。</p>
<blockquote>
<p>*<em>int atoi(const char <em>str)</em></em></p>
</blockquote>
<p><strong>函数说明：</strong>C 库函数 <strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）。</p>
<blockquote>
<p><strong>ssize_t read(int fd, void * buf, size_t count);</strong></p>
</blockquote>
<p><strong>函数说明：</strong>read()会把<strong>参数fd 所指的文件</strong>传送count 个字节到buf 指针所指的内存中. 若参数count 为0, 则read()不会有作用并返回0. 返回值为实际读取到的字节数, 如果返回0, 表示已到达文件尾或是无可读取的数据,此外文件读写位置会随读取到的字节移动。</p>
<blockquote>
<p><strong>fd所指文件指的是什么</strong></p>
</blockquote>
<p>每一个进程在进程控制块中都保存着一分<strong>文件描述符表</strong>，文件描述符就是这个表的<strong>索引</strong>，文件描述符表中每个表项都有一个<strong>指向已打开文件的指针</strong>。</p>
<p><strong>fd：</strong>为打开文件的文件描述符，而每个进程都有一张文件描述符表，fd文件描述符就是这张表的索引。</p>
<p><a href="https://blog.csdn.net/qq_31967569/article/details/81145309">https://blog.csdn.net/qq_31967569/article/details/81145309</a>  想了解更多可以看该链接。</p>
<p><strong>简言之，在linux中，值为0、1、2的fd，分别代表<code>标准输入</code>、<code>标准输出</code>、<code>标准错误输出</code>。</strong></p>
<h1 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">    	<span class="comment">// 输入参数不能少于2 接一个参数就可以</span></span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    	<span class="comment">// 将 argv[1] - 0x1234 赋值给fd </span></span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    	<span class="comment">// 读取32字节到buf中，那么fd 必须为标准输入 即为0</span></span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">    	<span class="comment">// buf 中32字节一定是 LETMEWIN 这样就能得到flag</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码看完了，想必如何做出来也都心里有数了。</p>
<p>参数一定要满足 <code>fd=0</code> 那么 参数 argv[1] = 0x1234 = 4660。</p>
<p><img src="https://gitee.com/AGenerousMiser/pic-go-image/raw/master/img/image-20211106231831401.png" alt="image-20211106231831401"></p>
<p>最后在输入“LETMEWIN” 即可。</p>
<h1 id="找到FLAG"><a href="#找到FLAG" class="headerlink" title="找到FLAG"></a>找到FLAG</h1><p>执行可执行文件fd。<code>./fd 4660</code>  回车。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时开始执行<code>len = read(fd, buf, 32);</code>  输入“LETMEWIN” 回车即可得到flag。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag:mommy! I think I know what a file descriptor is!!</p>
</blockquote>
<p><img src="https://gitee.com/AGenerousMiser/pic-go-image/raw/master/img/image-20211106231454694.png" alt="image-20211106231454694"></p>
<p>输入验证即可。</p>
<p>参考:</p>
<p><a href="https://www.cnblogs.com/ftl1012/p/ssh.html">https://www.cnblogs.com/ftl1012/p/ssh.html</a></p>
<p><a href="https://blog.csdn.net/qq_40657299/article/details/78332875">https://blog.csdn.net/qq_40657299/article/details/78332875</a></p>
<p><a href="http://c.biancheng.net/cpp/html/239.html">http://c.biancheng.net/cpp/html/239.html</a></p>
<p><a href="https://blog.csdn.net/qq_31967569/article/details/81145309">https://blog.csdn.net/qq_31967569/article/details/81145309</a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
